package kiwi.kiwilecturer;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 * Interface for lecturer input.
 * @author Tala Ross(rsstal002)
 * @author Nikai Jagganath (jggnik001)
 * @author Steve Shun Wang (wngshu003)
 */
//TODO: handle crash close and close DB connection on close
public class HomeFrame extends javax.swing.JFrame {
    
    
    //Model instance variables: files to upload 
    
    /**
     * Students info csv file.
     */
    private String studentPath;
    
    /**
     * Question-answer pairs csv file.
     */
    private String questionsPath;
    
    /**
     * Array of csv files representing query data.
     */
    private String [] dataFilePaths;
    private String [] dataFileNames;
    
    /**
     * Path of the schema image.
     */
    private String schemaPath;
    
    //Constructor:
    
    /**
     * Creates new form HomeFrame.
     */
    Lecturer lecturer;
    boolean connected;
    
    public HomeFrame() {
        initComponents();
        try {
            
            lecturer = new Lecturer();
            connected = lecturer.isConnected();
        } catch (IOException | ClassNotFoundException ex) {
            connected = false;
        }
        checkConnect();
    }
    
    private void checkConnect(){
        if (connected) {
            txtfFeedback.setText("Connected to database");
            enableButtons();
            btnReconnect.setEnabled(false);
        } else {
            txtfFeedback.setText("Not connected to database");
            disableButtons();
            btnReconnect.setEnabled(true);
        }
    }
    
    private void disableButtons(){
        btnGradeDescending.setEnabled(false);
        btnQueryData.setEnabled(false);
        btnQuestions.setEnabled(false);
        btnStudentCSV.setEnabled(false);
        btnUploadQueryData.setEnabled(false);
        btnView.setEnabled(false);
    }
    
    private void enableButtons(){
        btnGradeDescending.setEnabled(true);
        btnQueryData.setEnabled(true);
        btnQuestions.setEnabled(true);
        btnStudentCSV.setEnabled(true);
        btnUploadQueryData.setEnabled(true);
        btnView.setEnabled(true);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblUpload = new javax.swing.JLabel();
        btnStudentCSV = new javax.swing.JButton();
        btnQuestions = new javax.swing.JButton();
        btnQueryData = new javax.swing.JButton();
        txtfQuestionsFilename = new javax.swing.JTextField();
        txtfQueryDataFilename = new javax.swing.JTextField();
        txtfStudentFilename = new javax.swing.JTextField();
        btnUploadQueryData = new javax.swing.JButton();
        lblViewGrades = new javax.swing.JLabel();
        btnView = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtaMarks = new javax.swing.JTextArea();
        btnGradeDescending = new javax.swing.JButton();
        btnReconnect = new javax.swing.JButton();
        txtfFeedback = new javax.swing.JTextField();
        lblNoSubmissions = new javax.swing.JLabel();
        lblNoQuestions = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();
        txtfNoQuestions = new javax.swing.JTextField();
        txtfDate = new javax.swing.JTextField();
        txtfTime = new javax.swing.JTextField();
        txtfNoSubmissions = new javax.swing.JTextField();
        btnOK = new javax.swing.JButton();
        btnSchema = new javax.swing.JButton();
        txtfSchemaPath = new javax.swing.JTextField();
        btnUploadStudent = new javax.swing.JButton();
        btnUploadQuestions = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                windowCloser(evt);
            }
        });

        lblUpload.setText("Upload CSV Files:");

        btnStudentCSV.setText("Select student csv file");
        btnStudentCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStudentCSVActionPerformed(evt);
            }
        });

        btnQuestions.setText("Select questions csv file");
        btnQuestions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuestionsActionPerformed(evt);
            }
        });

        btnQueryData.setText("Select query data csv files");
        btnQueryData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQueryDataActionPerformed(evt);
            }
        });

        txtfQuestionsFilename.setEditable(false);

        txtfQueryDataFilename.setEditable(false);

        txtfStudentFilename.setEditable(false);

        btnUploadQueryData.setText("Upload");
        btnUploadQueryData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadQueryDataActionPerformed(evt);
            }
        });

        lblViewGrades.setText("View Student Grades:");

        btnView.setText("Student Number Ascending");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        txtaMarks.setEditable(false);
        txtaMarks.setColumns(20);
        txtaMarks.setRows(5);
        jScrollPane1.setViewportView(txtaMarks);

        btnGradeDescending.setText("Grade Descending");
        btnGradeDescending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGradeDescendingActionPerformed(evt);
            }
        });

        btnReconnect.setText("Reconnect");
        btnReconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReconnectActionPerformed(evt);
            }
        });

        txtfFeedback.setEditable(false);

        lblNoSubmissions.setText("Enter no. submissions allowed:");

        lblNoQuestions.setText("Enter no. quiz questions:");

        lblDate.setText("Enter deadline date:");

        lblTime.setText("Enter deadline time:");

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        btnSchema.setText("Select schema image");
        btnSchema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSchemaActionPerformed(evt);
            }
        });

        txtfSchemaPath.setEditable(false);

        btnUploadStudent.setText("Upload");
        btnUploadStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadStudentActionPerformed(evt);
            }
        });

        btnUploadQuestions.setText("Upload");
        btnUploadQuestions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadQuestionsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lblViewGrades)
                        .addGap(206, 206, 206)
                        .addComponent(btnGradeDescending)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnView))
                    .addComponent(txtfStudentFilename, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnQuestions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnQueryData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnStudentCSV, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUpload, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(55, 55, 55)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtfQueryDataFilename, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtfQuestionsFilename, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblDate)
                                    .addComponent(lblTime)
                                    .addComponent(lblNoQuestions)
                                    .addComponent(lblNoSubmissions)
                                    .addComponent(btnSchema))
                                .addGap(55, 55, 55)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtfSchemaPath)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtfNoQuestions, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtfNoSubmissions, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtfDate, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtfTime, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addComponent(txtfFeedback, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(77, 77, 77)
                                .addComponent(btnReconnect))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnOK)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnUploadStudent)
                    .addComponent(btnUploadQuestions)
                    .addComponent(btnUploadQueryData))
                .addGap(42, 42, 42))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtfFeedback, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReconnect))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNoSubmissions)
                    .addComponent(txtfNoSubmissions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNoQuestions)
                    .addComponent(txtfNoQuestions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtfDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTime)
                    .addComponent(txtfTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSchema)
                    .addComponent(txtfSchemaPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnOK))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addComponent(lblUpload)
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStudentCSV)
                    .addComponent(txtfStudentFilename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUploadStudent))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnQuestions)
                    .addComponent(txtfQuestionsFilename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUploadQuestions))
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnQueryData)
                    .addComponent(txtfQueryDataFilename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUploadQueryData))
                .addGap(61, 61, 61)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblViewGrades)
                    .addComponent(btnView)
                    .addComponent(btnGradeDescending))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    //Action performed methods:
    /**
     * Gets student csv file selected from file chooser and checks that it is
     * in fact a csv file.
     * @param evt Click "Select student csv file"
     */
    private void btnStudentCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStudentCSVActionPerformed
        
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fc.showOpenDialog(this);
        if (result==JFileChooser.APPROVE_OPTION) {
            //check that file is a csv
            File temp= fc.getSelectedFile();
            if (!(temp.getName().substring(temp.getName().lastIndexOf("."))).equals(".csv")) {
                JOptionPane.showMessageDialog(null, "Incorrect file upload.\nPlease upload a .csv file.", "Error", JOptionPane.ERROR_MESSAGE);
            }
            else {
                studentPath = temp.getAbsolutePath();
                txtfStudentFilename.setText(studentPath);
            }
        }
    }//GEN-LAST:event_btnStudentCSVActionPerformed
    
    /**
     * Gets questions csv file selected from file chooser and checks that it is
     * in fact a csv file.
     * @param evt Click "Select questions csv file"
     */
    private void btnQuestionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuestionsActionPerformed
        
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fc.showOpenDialog(this);
        if (result==JFileChooser.APPROVE_OPTION) {
            File temp= fc.getSelectedFile();
            if (!(temp.getName().substring(temp.getName().lastIndexOf("."))).equals(".csv")) {
                JOptionPane.showMessageDialog(null, "Incorrect file upload.\nPlease upload a .csv file.", "Error", JOptionPane.ERROR_MESSAGE);
            }
            else {
                questionsPath = temp.getAbsolutePath();
                txtfQuestionsFilename.setText(questionsPath);
            }
        }
    }//GEN-LAST:event_btnQuestionsActionPerformed
    
    /**
     * Gets query data csv files selected from file chooser and checks that
     * they are in fact a csv file.
     * @param evt Click "Select student csv files"
     */
    private void btnQueryDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQueryDataActionPerformed
        
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(System.getProperty("user.home")));
        fc.setMultiSelectionEnabled(true);
        int result = fc.showOpenDialog(this);
        if (result==JFileChooser.APPROVE_OPTION) {
            File [] temp= fc.getSelectedFiles();
            String [] names = new String [temp.length];
            String [] paths = new String [temp.length];
            String selected="";
            boolean flag=true;
            for (int i=0; i<temp.length; i++) {
                if (!(temp[i].getName().substring(temp[i].getName().lastIndexOf("."))).equals(".csv")) {
                    JOptionPane.showMessageDialog(null, "Incorrect file upload for one or more files.\nPlease upload .csv files.", "Error", JOptionPane.ERROR_MESSAGE);
                    flag=false;
                    break;
                }
                names[i] = temp[i].getName().substring(0, temp[i].getName().lastIndexOf("."));
                paths[i] = temp[i].getAbsolutePath();
                selected+= temp[i].getAbsolutePath()+", ";
            }
            if(flag){
                dataFilePaths = paths;
                dataFileNames = names;
                txtfQueryDataFilename.setText(selected.substring(0, selected.length()-2));
            }
        }
    }//GEN-LAST:event_btnQueryDataActionPerformed
    
    //TODO: check for failed upload and remove all "falsely" created tables and rows
    /**
     * Uploads the selected csv files.
     * @param evt Click "Upload"
     */
    private void btnUploadQueryDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadQueryDataActionPerformed
        
        String response;
        
        if (dataFilePaths!=null) {
            response = lecturer.uploadQueryData(dataFilePaths, dataFileNames);
            if (response.equals(Lecturer.SUCCESS)) {
                JOptionPane.showMessageDialog(null, "Uploaded .csv files succesfully.", "Upload successful", JOptionPane.PLAIN_MESSAGE);
            }
            else{
                JOptionPane.showMessageDialog(null, "The following files were not uploaded.\nFiles: "+response, "Upload unsuccessful", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        //clean up:
        dataFilePaths = null;
        txtfQueryDataFilename.setText("");
        
    }//GEN-LAST:event_btnUploadQueryDataActionPerformed
    
    /**
     * Gets table of student grades in ascending student number order from the
     * database.
     * @param evt Click "Student Number Ascending"
     */
    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        
        String response = lecturer.viewGradeAscStudent();
        if (response.equals(Lecturer.FAIL)) {
            txtaMarks.setText("Error reading grades from Students table");
        } else {
            txtaMarks.setText(response);
        }
        
    }//GEN-LAST:event_btnViewActionPerformed
    
    /**
     * Gets table of student grades in descending grade order from the
     * database.
     * @param evt Click "Grade Descending"
     */
    private void btnGradeDescendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGradeDescendingActionPerformed
        
        String response = lecturer.viewGradeDescGrade();
        if (response.equals(Lecturer.FAIL)) {
            txtaMarks.setText("Error reading grades from Students table");
        } else {
            txtaMarks.setText(response);
        }
        
    }//GEN-LAST:event_btnGradeDescendingActionPerformed

    private void btnReconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReconnectActionPerformed
        
        try {
            System.out.println("Trying to reconnect...");
            if (lecturer == null) { //An instance of Lecturer was not created on creation of the HomeFrame
                try {
                    lecturer = new Lecturer(); //Try make a new instance of lecturer and connect to DB
                    lecturer.connectToDB();
                    connected = lecturer.isConnected();
                } catch (IOException | ClassNotFoundException e) {
                    System.out.println("Error creating a new lecturer");
                }
            } else {
                lecturer.connectToDB();
                connected = lecturer.isConnected();
            }
        } catch (IOException | ClassNotFoundException ex) {
            connected = false;
        }
        
        if (!connected) {
            JOptionPane.showMessageDialog(null, "Connection to database failed.", "Connection Error", JOptionPane.ERROR_MESSAGE);
        }        
        checkConnect();
        
    }//GEN-LAST:event_btnReconnectActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        
        //Send assignment information to save on server
        
        String response = "";
        
        String noSubmissions = txtfNoSubmissions.getText();
        String noQuestions = txtfNoQuestions.getText();
        String date = txtfDate.getText();
        String time = txtfTime.getText();
        
        if(noSubmissions.equals("") || noQuestions.equals("") || date.equals("") || time.equals("")){
            JOptionPane.showMessageDialog(this, "Please fill in blank fields", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else{
            response = lecturer.uploadAssignmentInfo(noSubmissions, noQuestions, date, time, schemaPath);
            if (response.equals(Lecturer.SUCCESS)) {
                JOptionPane.showMessageDialog(null, "Uploaded assignment information succesfully.", "Upload successful", JOptionPane.PLAIN_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Assignment information not uploaded.", "Upload unsuccessful", JOptionPane.ERROR_MESSAGE);
            }
            //clean up:
            txtfNoSubmissions.setText("");
            txtfNoQuestions.setText("");
            txtfDate.setText("");
            txtfTime.setText("");
            txtfSchemaPath.setText("");            
        }
        
    }//GEN-LAST:event_btnOKActionPerformed

    private void btnSchemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSchemaActionPerformed
        
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fc.showOpenDialog(this);
        if (result==JFileChooser.APPROVE_OPTION) {
            File image = fc.getSelectedFile();
            if (!(image.getName().substring(image.getName().lastIndexOf("."))).equalsIgnoreCase(".jpg")) {
                JOptionPane.showMessageDialog(null, "Incorrect file upload.\nPlease upload a .png image.", "Error", JOptionPane.ERROR_MESSAGE);
            }
            else {
                schemaPath = image.getAbsolutePath();
                txtfSchemaPath.setText(schemaPath);
            }
        }
        
    }//GEN-LAST:event_btnSchemaActionPerformed

    private void btnUploadStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadStudentActionPerformed
        
        String response;
        
        if (studentPath!=null) {
            response = lecturer.uploadStudents(studentPath);
            if(response.equals(Lecturer.SUCCESS)){
                JOptionPane.showMessageDialog(null, "Uploaded 'Students' csv file succesfully.", "Upload successful",JOptionPane.PLAIN_MESSAGE);
            }
            else{
                JOptionPane.showMessageDialog(null, "'Students' file was not uploaded.", "Upload unsuccessful", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        //clean up:
        studentPath = null;
        txtfStudentFilename.setText("");
        
    }//GEN-LAST:event_btnUploadStudentActionPerformed

    private void btnUploadQuestionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadQuestionsActionPerformed
        
        String response;
        
        if (questionsPath!=null) {
            response = lecturer.uploadQuestions(questionsPath);
            if(response.equals(Lecturer.SUCCESS)){
                JOptionPane.showMessageDialog(null, "Uploaded 'Questions' csv file succesfully.", "Upload successful",JOptionPane.PLAIN_MESSAGE);
            }
            else{
                JOptionPane.showMessageDialog(null, "'Questions' file was not uploaded.", "Upload unsuccessful", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        //clean up:
        questionsPath = null;
        txtfQuestionsFilename.setText("");
        
    }//GEN-LAST:event_btnUploadQuestionsActionPerformed

    private void windowCloser(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowCloser
        try {
                lecturer.closeConnection();
            }
        catch (IOException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "Error closing sockets.", "Socket Error", JOptionPane.ERROR_MESSAGE);
            }
        System.exit(0);
    }//GEN-LAST:event_windowCloser
    
    
    //Main method:
    
    /**
     * Runs the interface.
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new HomeFrame().setVisible(true);
            }
        });
    }

    
    //Interface instance variables:
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGradeDescending;
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnQueryData;
    private javax.swing.JButton btnQuestions;
    private javax.swing.JButton btnReconnect;
    private javax.swing.JButton btnSchema;
    private javax.swing.JButton btnStudentCSV;
    private javax.swing.JButton btnUploadQueryData;
    private javax.swing.JButton btnUploadQuestions;
    private javax.swing.JButton btnUploadStudent;
    private javax.swing.JButton btnView;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblNoQuestions;
    private javax.swing.JLabel lblNoSubmissions;
    private javax.swing.JLabel lblTime;
    private javax.swing.JLabel lblUpload;
    private javax.swing.JLabel lblViewGrades;
    private javax.swing.JTextArea txtaMarks;
    private javax.swing.JTextField txtfDate;
    private javax.swing.JTextField txtfFeedback;
    private javax.swing.JTextField txtfNoQuestions;
    private javax.swing.JTextField txtfNoSubmissions;
    private javax.swing.JTextField txtfQueryDataFilename;
    private javax.swing.JTextField txtfQuestionsFilename;
    private javax.swing.JTextField txtfSchemaPath;
    private javax.swing.JTextField txtfStudentFilename;
    private javax.swing.JTextField txtfTime;
    // End of variables declaration//GEN-END:variables

}
